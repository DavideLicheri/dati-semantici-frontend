# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI Test and Publish Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - run: yarn build
      - name: Upload production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Static Build folder
          path: |
            ./build
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Linting with Super-Linter
        uses: github/super-linter@v4.8.1
        env:
          VALIDATE_MARKDOWN: false
          VALIDATE_BASH: false
          FILTER_REGEX_INCLUDE: '.*(src|\.github)/.*'
          FILTER_REGEX_EXCLUDE: '.*.(min.css|ttf|woff|woff2|svg|txt|md)'
          JAVASCRIPT_ES_CONFIG_FILE: '../../.eslintrc.json'
          JAVASCRIPT_DEFAULT_STYLE: 'prettier'
          CSS_FILE_NAME: '../../.stylelintrc.json'
  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - name: Running audit check
        run: yarn audit --groups dependencies
      - name: docker-security
        uses: instrumenta/conftest-action@master
        with:
          files: Dockerfile
          policy: dockerfile-security.rego
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Running Tests
        run: yarn test:coverage
      - run: yarn build
      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: |
            ./coverage
      - name: Monitor coverage
        if: github.event_name == 'pull_request'
        uses: slavcodev/coverage-monitor-action@1.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clover_file: "./coverage/clover.xml"
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - build
      - lint
      - security
      - test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Log in to the Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=ndc-{{branch}}-{{date 'YYYYMMDD'}}-{{sha}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}